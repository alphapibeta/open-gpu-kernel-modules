Start file: cascading_sum.mod.c
#include <linux/module.h>
#define INCLUDE_VERMAGIC
#include <linux/build-salt.h>
#include <linux/vermagic.h>
#include <linux/compiler.h>

BUILD_SALT;

MODULE_INFO(vermagic, VERMAGIC_STRING);
MODULE_INFO(name, KBUILD_MODNAME);

__visible struct module __this_module
__section(".gnu.linkonce.this_module") = {
	.name = KBUILD_MODNAME,
	.init = init_module,
#ifdef CONFIG_MODULE_UNLOAD
	.exit = cleanup_module,
#endif
	.arch = MODULE_ARCH_INIT,
};

#ifdef CONFIG_RETPOLINE
MODULE_INFO(retpoline, "Y");
#endif

static const struct modversion_info ____versions[]
__used __section("__versions") = {
	{ 0xd31aec96, "module_layout" },
	{ 0x6bc3fbc0, "__unregister_chrdev" },
	{ 0xeb233a45, "__kmalloc" },
	{ 0x1fdc7df2, "_mcount" },
	{ 0x12a4e128, "__arch_copy_from_user" },
	{ 0xb43f9365, "ktime_get" },
	{ 0xb0a8579b, "device_destroy" },
	{ 0x13787c35, "__register_chrdev" },
	{ 0xdcb764ad, "memset" },
	{ 0x4b0a3f52, "gic_nonsecure_priorities" },
	{ 0xc5850110, "printk" },
	{ 0xace17747, "class_unregister" },
	{ 0x22431a9f, "device_create" },
	{ 0x6cbbfc54, "__arch_copy_to_user" },
	{ 0x86332725, "__stack_chk_fail" },
	{ 0x49f2fa43, "cpu_hwcaps" },
	{ 0xf424b0fe, "cpu_hwcap_keys" },
	{ 0x37a0cba, "kfree" },
	{ 0x3eb58e34, "class_destroy" },
	{ 0x14b89635, "arm64_const_caps_ready" },
	{ 0x9dcd5c26, "__class_create" },
	{ 0x88db9f48, "__check_object_size" },
};

MODULE_INFO(depends, "");


End file: cascading_sum.mod.c
Start file: sum_array_main.c
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/init.h>
#include <linux/fs.h>
#include <linux/cdev.h>
#include <linux/device.h>
#include <linux/uaccess.h>
#include <linux/ktime.h>
#include "sum_array_impl.h"
#include <linux/slab.h>

#define DEVICE_NAME "sum_array_dev"
#define CLASS_NAME "sum_array_class"

static int majorNumber;
static struct class* sumArrayClass = NULL;
static struct device* sumArrayDevice = NULL;
static long long results[2];

static int device_open(struct inode *, struct file *);
static int device_release(struct inode *, struct file *);
static ssize_t device_read(struct file *, char __user *, size_t, loff_t *);
static ssize_t device_write(struct file *, const char __user *, size_t, loff_t *);

static struct file_operations fops = {
    .open = device_open,
    .read = device_read,
    .write = device_write,
    .release = device_release,
};

static int __init sum_array_init(void) {
    printk(KERN_INFO "Sum Array: Initializing the module\n");

    majorNumber = register_chrdev(0, DEVICE_NAME, &fops);
    if (majorNumber < 0) {
        printk(KERN_ALERT "Sum Array failed to register a major number\n");
        return majorNumber;
    }

    sumArrayClass = class_create(THIS_MODULE, CLASS_NAME);
    if (IS_ERR(sumArrayClass)) {
        unregister_chrdev(majorNumber, DEVICE_NAME);
        printk(KERN_ALERT "Failed to register device class\n");
        return PTR_ERR(sumArrayClass);
    }

    sumArrayDevice = device_create(sumArrayClass, NULL, MKDEV(majorNumber, 0), NULL, DEVICE_NAME);
    if (IS_ERR(sumArrayDevice)) {
        class_destroy(sumArrayClass);
        unregister_chrdev(majorNumber, DEVICE_NAME);
        printk(KERN_ALERT "Failed to create the device\n");
        return PTR_ERR(sumArrayDevice);
    }

    printk(KERN_INFO "Sum Array: device class created correctly\n");
    return 0;
}

static void __exit sum_array_exit(void) {
    device_destroy(sumArrayClass, MKDEV(majorNumber, 0));
    class_unregister(sumArrayClass);
    class_destroy(sumArrayClass);
    unregister_chrdev(majorNumber, DEVICE_NAME);
    printk(KERN_INFO "Sum Array: Goodbye from the LKM!\n");
}

static int device_open(struct inode *inodep, struct file *filep) {
    printk(KERN_INFO "Sum Array: Device has been opened\n");
    return 0;
}

static int device_release(struct inode *inodep, struct file *filep) {
    printk(KERN_INFO "Sum Array: Device successfully closed\n");
    return 0;
}

static ssize_t device_read(struct file *filep, char __user *buffer, size_t len, loff_t *offset) {
    int error_count = 0;
    size_t bytes_to_copy = min(len, sizeof(results) - (size_t)*offset);

    if (*offset >= sizeof(results)) {
        return 0;
    }

    error_count = copy_to_user(buffer, (char *)results + *offset, bytes_to_copy);

    if (error_count == 0) {
        *offset += bytes_to_copy;
        return bytes_to_copy;
    } else {
        return -EFAULT;
    }
}

static ssize_t device_write(struct file *filep, const char __user *buffer, size_t len, loff_t *offset) {
    int *array;
    int size;
    int error_count = 0;
    ktime_t start, end;
    s64 duration_normal, duration_cascading;

    if (len < sizeof(int)) {
        return -EINVAL;
    }

    error_count = copy_from_user(&size, buffer, sizeof(int));
    if (error_count != 0) {
        return -EFAULT;
    }

    if (len != sizeof(int) + size * sizeof(int)) {
        return -EINVAL;
    }

    array = kmalloc(size * sizeof(int), GFP_KERNEL);
    if (!array) {
        return -ENOMEM;
    }

    error_count = copy_from_user(array, buffer + sizeof(int), size * sizeof(int));
    if (error_count != 0) {
        kfree(array);
        return -EFAULT;
    }

    start = ktime_get();
    results[0] = normal_sum(array, size);
    end = ktime_get();
    duration_normal = ktime_to_ns(ktime_sub(end, start));

    start = ktime_get();
    results[1] = cascading_sum(array, size);
    end = ktime_get();
    duration_cascading = ktime_to_ns(ktime_sub(end, start));

    kfree(array);

    printk(KERN_INFO "Normal sum execution time: %lld nanoseconds\n", duration_normal);
    printk(KERN_INFO "Cascading sum execution time: %lld nanoseconds\n", duration_cascading);

    return len;
}

module_init(sum_array_init);
module_exit(sum_array_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Your Name");
MODULE_DESCRIPTION("Sum array calculation using normal and cascading methods");
End file: sum_array_main.c
Start file: cascading_sum_main.c
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/init.h>
#include <linux/fs.h>
#include <linux/cdev.h>
#include <linux/device.h>
#include <linux/uaccess.h>
#include <linux/ktime.h>
#include "sum_array_impl.h"
#include <linux/slab.h>

#define DEVICE_NAME "cascading_sum_dev"
#define CLASS_NAME "cascading_sum_class"

static int majorNumber;
static struct class* cascadingSumClass = NULL;
static struct device* cascadingSumDevice = NULL;
static long long result;

static int device_open(struct inode *, struct file *);
static int device_release(struct inode *, struct file *);
static ssize_t device_read(struct file *, char __user *, size_t, loff_t *);
static ssize_t device_write(struct file *, const char __user *, size_t, loff_t *);

static struct file_operations fops = {
    .open = device_open,
    .read = device_read,
    .write = device_write,
    .release = device_release,
};

static int __init cascading_sum_init(void) {
    printk(KERN_INFO "Cascading Sum: Initializing the module\n");

    majorNumber = register_chrdev(0, DEVICE_NAME, &fops);
    if (majorNumber < 0) {
        printk(KERN_ALERT "Cascading Sum failed to register a major number\n");
        return majorNumber;
    }

    cascadingSumClass = class_create(THIS_MODULE, CLASS_NAME);
    if (IS_ERR(cascadingSumClass)) {
        unregister_chrdev(majorNumber, DEVICE_NAME);
        printk(KERN_ALERT "Failed to register device class\n");
        return PTR_ERR(cascadingSumClass);
    }

    cascadingSumDevice = device_create(cascadingSumClass, NULL, MKDEV(majorNumber, 0), NULL, DEVICE_NAME);
    if (IS_ERR(cascadingSumDevice)) {
        class_destroy(cascadingSumClass);
        unregister_chrdev(majorNumber, DEVICE_NAME);
        printk(KERN_ALERT "Failed to create the device\n");
        return PTR_ERR(cascadingSumDevice);
    }

    printk(KERN_INFO "Cascading Sum: device class created correctly\n");
    return 0;
}

static void __exit cascading_sum_exit(void) {
    device_destroy(cascadingSumClass, MKDEV(majorNumber, 0));
    class_unregister(cascadingSumClass);
    class_destroy(cascadingSumClass);
    unregister_chrdev(majorNumber, DEVICE_NAME);
    printk(KERN_INFO "Cascading Sum: Goodbye from the LKM!\n");
}

static int device_open(struct inode *inodep, struct file *filep) {
    printk(KERN_INFO "Cascading Sum: Device has been opened\n");
    return 0;
}

static int device_release(struct inode *inodep, struct file *filep) {
    printk(KERN_INFO "Cascading Sum: Device successfully closed\n");
    return 0;
}

static ssize_t device_read(struct file *filep, char __user *buffer, size_t len, loff_t *offset) {
    int error_count = 0;
    size_t bytes_to_copy = min(len, sizeof(result) - (size_t)*offset);

    if (*offset >= sizeof(result)) {
        return 0;
    }

    error_count = copy_to_user(buffer, (char *)&result + *offset, bytes_to_copy);

    if (error_count == 0) {
        *offset += bytes_to_copy;
        return bytes_to_copy;
    } else {
        return -EFAULT;
    }
}

static ssize_t device_write(struct file *filep, const char __user *buffer, size_t len, loff_t *offset) {
    int *array;
    int size;
    int error_count = 0;
    ktime_t start, end;
    s64 duration;

    if (len < sizeof(int)) {
        return -EINVAL;
    }

    error_count = copy_from_user(&size, buffer, sizeof(int));
    if (error_count != 0) {
        return -EFAULT;
    }

    if (len != sizeof(int) + size * sizeof(int)) {
        return -EINVAL;
    }

    array = kmalloc(size * sizeof(int), GFP_KERNEL);
    if (!array) {
        return -ENOMEM;
    }

    error_count = copy_from_user(array, buffer + sizeof(int), size * sizeof(int));
    if (error_count != 0) {
        kfree(array);
        return -EFAULT;
    }

    start = ktime_get();
    result = cascading_sum(array, size);
    end = ktime_get();
    duration = ktime_to_ns(ktime_sub(end, start));

    kfree(array);

    printk(KERN_INFO "Cascading sum execution time: %lld nanoseconds\n", duration);

    return len;
}


module_init(cascading_sum_init);
module_exit(cascading_sum_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Your Name");
MODULE_DESCRIPTION("Cascading sum calculation");
End file: cascading_sum_main.c
Start file: Makefile
obj-m += sum_array.o cascading_sum.o

sum_array-objs := sum_array_impl.o sum_array_main.o
cascading_sum-objs := sum_array_impl.o cascading_sum_main.o

KDIR := /lib/modules/$(shell uname -r)/build
PWD := $(shell pwd)

CC := aarch64-linux-gnu-gcc

ccflags-y := -O3 -std=gnu99
KBUILD_CFLAGS := $(filter-out -mgeneral-regs-only,$(KBUILD_CFLAGS))

all: modules userprogram

modules:
	$(MAKE) -C $(KDIR) M=$(PWD) ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- \
		CFLAGS_MODULE="-DMODULE -fno-pic" modules

userprogram: userprogram.c
	$(CC) -O3 -std=gnu99 -o userprogram userprogram.c -lm

clean:
	$(MAKE) -C $(KDIR) M=$(PWD) ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- clean
	rm -f userprogram
End file: Makefile
Start file: normal_sum_main.c
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/init.h>
#include <linux/fs.h>
#include <linux/cdev.h>
#include <linux/device.h>
#include <linux/uaccess.h>
#include <linux/ktime.h>
#include "sum_array_impl.h"
#include <linux/slab.h>

#define DEVICE_NAME "sum_array_dev"
#define CLASS_NAME "sum_array_class"

static int majorNumber;
static struct class* sumArrayClass = NULL;
static struct device* sumArrayDevice = NULL;
static long long results[2];

static int device_open(struct inode *, struct file *);
static int device_release(struct inode *, struct file *);
static ssize_t device_read(struct file *, char __user *, size_t, loff_t *);
static ssize_t device_write(struct file *, const char __user *, size_t, loff_t *);

static struct file_operations fops = {
    .open = device_open,
    .read = device_read,
    .write = device_write,
    .release = device_release,
};

static int __init sum_array_init(void) {
    printk(KERN_INFO "Sum Array: Initializing the module\n");

    majorNumber = register_chrdev(0, DEVICE_NAME, &fops);
    if (majorNumber < 0) {
        printk(KERN_ALERT "Sum Array failed to register a major number\n");
        return majorNumber;
    }

    sumArrayClass = class_create(THIS_MODULE, CLASS_NAME);
    if (IS_ERR(sumArrayClass)) {
        unregister_chrdev(majorNumber, DEVICE_NAME);
        printk(KERN_ALERT "Failed to register device class\n");
        return PTR_ERR(sumArrayClass);
    }

    sumArrayDevice = device_create(sumArrayClass, NULL, MKDEV(majorNumber, 0), NULL, DEVICE_NAME);
    if (IS_ERR(sumArrayDevice)) {
        class_destroy(sumArrayClass);
        unregister_chrdev(majorNumber, DEVICE_NAME);
        printk(KERN_ALERT "Failed to create the device\n");
        return PTR_ERR(sumArrayDevice);
    }

    printk(KERN_INFO "Sum Array: device class created correctly\n");
    return 0;
}

static void __exit sum_array_exit(void) {
    device_destroy(sumArrayClass, MKDEV(majorNumber, 0));
    class_unregister(sumArrayClass);
    class_destroy(sumArrayClass);
    unregister_chrdev(majorNumber, DEVICE_NAME);
    printk(KERN_INFO "Sum Array: Goodbye from the LKM!\n");
}

static int device_open(struct inode *inodep, struct file *filep) {
    printk(KERN_INFO "Sum Array: Device has been opened\n");
    return 0;
}

static int device_release(struct inode *inodep, struct file *filep) {
    printk(KERN_INFO "Sum Array: Device successfully closed\n");
    return 0;
}

static ssize_t device_read(struct file *filep, char __user *buffer, size_t len, loff_t *offset) {
    int error_count = 0;
    size_t bytes_to_copy = min(len, sizeof(results) - (size_t)*offset);

    if (*offset >= sizeof(results)) {
        return 0;
    }

    error_count = copy_to_user(buffer, (char *)results + *offset, bytes_to_copy);

    if (error_count == 0) {
        *offset += bytes_to_copy;
        return bytes_to_copy;
    } else {
        return -EFAULT;
    }
}

static ssize_t device_write(struct file *filep, const char __user *buffer, size_t len, loff_t *offset) {
    float angles[13];
    float sin_results[13], cos_results[13];
    int error_count = 0;
    ktime_t start, end;
    s64 duration;

    if (len != sizeof(angles)) {
        return -EINVAL;
    }

    error_count = copy_from_user(angles, buffer, len);

    if (error_count == 0) {
        start = ktime_get();
        sincospif_gpu_calculate_taylor(angles, sin_results, cos_results, 13);
        end = ktime_get();
        duration = ktime_to_ns(ktime_sub(end, start));
        printk(KERN_INFO "Kernel execution time: %lld nanoseconds\n", duration);

        memcpy(results, angles, sizeof(angles));
        memcpy(results + 13, sin_results, sizeof(sin_results));
        memcpy(results + 26, cos_results, sizeof(cos_results));
        return len;
    } else {
        return -EFAULT;
    }
}



module_init(sum_array_init);
module_exit(sum_array_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Your Name");
MODULE_DESCRIPTION("Sum array calculation using normal and cascading methods");
End file: normal_sum_main.c
Start file: file.sh
#!/bin/bash

set -e

NORMAL_MODULE_NAME="sum_array"
CASCADING_MODULE_NAME="cascading_sum"
NORMAL_DEVICE_NAME="sum_array_dev"
CASCADING_DEVICE_NAME="cascading_sum_dev"
PERF_OUTPUT_DIR="perf_output"

unload_modules() {
    for module in "$NORMAL_MODULE_NAME" "$CASCADING_MODULE_NAME"; do
        if lsmod | grep -q "$module"; then
            sudo rmmod "$module" || echo "Failed to unload $module"
        else
            echo "$module is not loaded"
        fi
    done
}

load_modules() {
    for module in "$NORMAL_MODULE_NAME" "$CASCADING_MODULE_NAME"; do
        if ! lsmod | grep -q "$module"; then
            sudo insmod "${module}.ko" || (echo "Failed to load $module" && exit 1)
            echo "$module loaded successfully"
            sleep 1
        else
            echo "$module is already loaded"
        fi
    done

    # Check if device files are created
    for device in "$NORMAL_DEVICE_NAME" "$CASCADING_DEVICE_NAME"; do
        if [[ ! -e "/dev/$device" ]]; then
            echo "Device file /dev/$device not created. Check dmesg for errors."
            exit 1
        fi
    done
}

compile_and_build() {
    echo "Cleaning and building..."
    make clean
    make
}

setup_permissions() {
    for device in "$NORMAL_DEVICE_NAME" "$CASCADING_DEVICE_NAME"; do
        sudo chmod 666 "/dev/$device"
    done
}

mkdir -p "$PERF_OUTPUT_DIR"

unload_modules
compile_and_build
load_modules
setup_permissions

echo "Modules and user program are compiled and loaded. Ready for profiling."
echo "To profile normal sum: ./userprogram /dev/$NORMAL_DEVICE_NAME"
echo "To profile cascading sum: ./userprogram /dev/$CASCADING_DEVICE_NAME"
End file: file.sh
Start file: sum_array_impl.h
#ifndef SUM_ARRAY_IMPL_H
#define SUM_ARRAY_IMPL_H

long long normal_sum(int *array, int size);
long long cascading_sum(int *array, int size);

#endif // SUM_ARRAY_IMPL_H
End file: sum_array_impl.h
Start file: userprogram.c
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <time.h>

#define ARRAY_SIZE 1000000

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <device_file>\n", argv[0]);
        return 1;
    }

    const char *DEVICE_FILE = argv[1];
    int fd;
    int *array;
    long long results[2];
    struct timespec start, end;
    double cpu_time_used;
    int size = ARRAY_SIZE;

    fd = open(DEVICE_FILE, O_RDWR);
    if (fd < 0) {
        perror("Failed to open the device");
        return 1;
    }

    array = malloc(ARRAY_SIZE * sizeof(int));
    if (!array) {
        perror("Failed to allocate memory");
        close(fd);
        return 1;
    }

    srand(time(NULL));
    for (int i = 0; i < ARRAY_SIZE; i++) {
        array[i] = rand() % 100;  // Random numbers between 0 and 99
    }

    printf("Array sample (first 10 elements): ");
    for (int i = 0; i < 10; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");

    printf("Array sample (last 10 elements): ");
    for (int i = ARRAY_SIZE - 10; i < ARRAY_SIZE; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");

    clock_gettime(CLOCK_MONOTONIC, &start);

    if (write(fd, &size, sizeof(int)) != sizeof(int) ||
        write(fd, array, ARRAY_SIZE * sizeof(int)) != ARRAY_SIZE * sizeof(int)) {
        perror("Failed to write to the device");
        free(array);
        close(fd);
        return 1;
    }

    if (read(fd, results, sizeof(results)) != sizeof(results)) {
        perror("Failed to read results from the device");
        free(array);
        close(fd);
        return 1;
    }

    clock_gettime(CLOCK_MONOTONIC, &end);

    cpu_time_used = (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec) / 1e9;

    printf("User program execution time: %f seconds\n", cpu_time_used);
    printf("Normal sum result: %lld\n", results[0]);
    printf("Cascading sum result: %lld\n", results[1]);

    free(array);
    close(fd);

    return 0;
}
End file: userprogram.c
Start file: sum_array_impl.c
#include <linux/slab.h>
#include "sum_array_impl.h"

long long normal_sum(int *array, int size) {
    long long sum = 0;
    int i;
    for (i = 0; i < size; i++) {
        sum += array[i];
    }
    return sum;
}

long long cascading_sum(int *array, int size) {
    int new_size, i;
    int *temp;
    long long result;

    if (size == 1) return array[0];
    if (size == 2) return array[0] + array[1];

    new_size = (size + 1) / 2;
    temp = kmalloc(new_size * sizeof(int), GFP_KERNEL);
    if (!temp) {
        return -ENOMEM;
    }

    for (i = 0; i < size / 2; i++) {
        temp[i] = array[2*i] + array[2*i + 1];
    }

    if (size % 2 != 0) {
        temp[new_size - 1] = array[size - 1];
    }

    result = cascading_sum(temp, new_size);
    kfree(temp);
    return result;
}
End file: sum_array_impl.c
Start file: perf.sh
#!/bin/bash

NORMAL_SUM_DIR="perf_output/normal_sum"
CASCADING_SUM_DIR="perf_output/cascading_sum"

# Create directories if they do not exist
mkdir -p "$NORMAL_SUM_DIR"
mkdir -p "$CASCADING_SUM_DIR"

# Profile normal sum
echo "Profiling normal sum..."
sudo perf record -g -o "$NORMAL_SUM_DIR/perf.data" -- ./userprogram /dev/sum_array_dev
sudo perf report -i "$NORMAL_SUM_DIR/perf.data" > "$NORMAL_SUM_DIR/perf_report.txt"
sudo perf script -i "$NORMAL_SUM_DIR/perf.data" > "$NORMAL_SUM_DIR/perf_script.txt"

# Generate flame graph for normal sum
sudo perf script -i "$NORMAL_SUM_DIR/perf.data" | ~/FlameGraph/stackcollapse-perf.pl > "$NORMAL_SUM_DIR/out.folded"
~/FlameGraph/flamegraph.pl "$NORMAL_SUM_DIR/out.folded" > "$NORMAL_SUM_DIR/flamegraph.svg"

# Profile cascading sum
echo "Profiling cascading sum..."
sudo perf record -g -o "$CASCADING_SUM_DIR/perf.data" -- ./userprogram /dev/cascading_sum_dev
sudo perf report -i "$CASCADING_SUM_DIR/perf.data" > "$CASCADING_SUM_DIR/perf_report.txt"
sudo perf script -i "$CASCADING_SUM_DIR/perf.data" > "$CASCADING_SUM_DIR/perf_script.txt"

# Generate flame graph for cascading sum
sudo perf script -i "$CASCADING_SUM_DIR/perf.data" | ~/FlameGraph/stackcollapse-perf.pl > "$CASCADING_SUM_DIR/out.folded"
~/FlameGraph/flamegraph.pl "$CASCADING_SUM_DIR/out.folded" > "$CASCADING_SUM_DIR/flamegraph.svg"

echo "Profiling complete. Results are stored in $NORMAL_SUM_DIR and $CASCADING_SUM_DIR"

End file: perf.sh
Start file: sum_array.mod.c
#include <linux/module.h>
#define INCLUDE_VERMAGIC
#include <linux/build-salt.h>
#include <linux/vermagic.h>
#include <linux/compiler.h>

BUILD_SALT;

MODULE_INFO(vermagic, VERMAGIC_STRING);
MODULE_INFO(name, KBUILD_MODNAME);

__visible struct module __this_module
__section(".gnu.linkonce.this_module") = {
	.name = KBUILD_MODNAME,
	.init = init_module,
#ifdef CONFIG_MODULE_UNLOAD
	.exit = cleanup_module,
#endif
	.arch = MODULE_ARCH_INIT,
};

#ifdef CONFIG_RETPOLINE
MODULE_INFO(retpoline, "Y");
#endif

static const struct modversion_info ____versions[]
__used __section("__versions") = {
	{ 0xd31aec96, "module_layout" },
	{ 0x6bc3fbc0, "__unregister_chrdev" },
	{ 0xeb233a45, "__kmalloc" },
	{ 0x1fdc7df2, "_mcount" },
	{ 0x12a4e128, "__arch_copy_from_user" },
	{ 0xb43f9365, "ktime_get" },
	{ 0xb0a8579b, "device_destroy" },
	{ 0x13787c35, "__register_chrdev" },
	{ 0xdcb764ad, "memset" },
	{ 0x4b0a3f52, "gic_nonsecure_priorities" },
	{ 0xc5850110, "printk" },
	{ 0xace17747, "class_unregister" },
	{ 0x22431a9f, "device_create" },
	{ 0x6cbbfc54, "__arch_copy_to_user" },
	{ 0x86332725, "__stack_chk_fail" },
	{ 0x49f2fa43, "cpu_hwcaps" },
	{ 0xf424b0fe, "cpu_hwcap_keys" },
	{ 0x37a0cba, "kfree" },
	{ 0x3eb58e34, "class_destroy" },
	{ 0x14b89635, "arm64_const_caps_ready" },
	{ 0x9dcd5c26, "__class_create" },
	{ 0x88db9f48, "__check_object_size" },
};

MODULE_INFO(depends, "");


End file: sum_array.mod.c
